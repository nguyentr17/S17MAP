author: "JL"
date: "January 26, 2017"
output: html_notebook
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Data Used
All entries with unlimited play time -- Sample A
Comparing with entries with one additional variable that involves music -- Sample B (a subset of Sample A)
## Cleaning the data
Sample B was extracted from Sample A by identiying entries with any of the following 'v1lable' names :      "Music" "music" "song" "Song" "MUSICON MUSIC"
`v1_music <- shape[tolower(strtrim(shape$v1label,2))=="mu" | tolower(strtrim(shape$v1label,2))=="so",]`
## Including Plots
You can also embed plots, for example:
`library(ggplot2)`
`library(plyr)`
```{r graph, echo = FALSE}
shape <- read.csv("~/Desktop/MAP/Original.csv",
stringsAsFactors = F)
shape_untime = shape[shape$requestedTime==0,]
shape_untimed = shape_untime[shape_untime$timeUsed!=0,]
shape_untimed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
shape_untimed_sec$numShapes = as.factor(shape_untimed_sec$numShapes)
shape_untimed_sec$timerDisplay = as.factor(shape_untimed_sec$timerDisplay)
shape_untimed_sec$matchingScheme = as.factor(shape_untimed_sec$matchingScheme)
shape_untimed_truncate = shape_untimed_sec[shape_untimed_sec$TimeUsedSec<=1000,]
library(ggplot2)
ggplot(data = shape_untimed_truncate, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=matchingScheme) + scale_y_log10() + theme(legend.position="top") + labs(title="kj")
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data = shape_untimed, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=matchingScheme) + scale_y_log10() + theme(legend.position="top") + labs(title="")
shape_untimed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
shape_untimed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
ggplot(data = shape_untimed, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=matchingScheme) + scale_y_log10() + theme(legend.position="top") + labs(title="")
timed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
shape_untimed_sec$numShapes = as.factor(shape_untimed_sec$numShapes)
shape_untimed_sec$timerDisplay = as.factor(shape_untimed_sec$timerDisplay)
shape_untime
shape_untimed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
shape_untimed_sec$numShapes = as.factor(shape_untimed_sec$numShapes)
shape_untimed_sec$timerDisplay = as.factor(shape_untimed_sec$timerDisplay)
shape_untimed_sec$matchingScheme = as.factor(shape_untimed_sec$matchingScheme)
shape_untimed_truncate = shape_untimed_sec[shape_untimed_sec$TimeUsedSec<=1000,]
ggplot(data = shape_untimed, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=matchingScheme) + scale_y_log10() + theme(legend.position="top") + labs(title="")
max(shape$timeUsed)
View(shape_untime)
ggplot(data = shape_untimed_truncate, aes(x=numShapes, y=numErrors)) + geom_boxplot()  + aes(colour=matchingScheme) + scale_y_log10() + facet_wrap(~timerDisplay, ncol=4) + theme(legend.position="top") + labs(title="")
ggplot(data = shape_untimed_truncate, aes(x=numShapes, y=numErrors)) + geom_boxplot()  + aes(colour=matchingScheme) +  facet_wrap(~timerDisplay, ncol=4) + theme(legend.position="top") + labs(title="")
ggplot(data = shape_untimed, aes(x=numShapes, y=numErrors)) + geom_boxplot()  + aes(colour=matchingScheme) +  facet_wrap(~timerDisplay, ncol=4) + theme(legend.position="top") + labs(title="")
plot1 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + theme(legend.position="top") + labs(title="")
plot2 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + aes(colour=numShapes) + facet_wrap(~timerDisplay, ncol=4) +
theme(legend.position="top") + labs(title="")
grid.arrange(plot1, plot2, ncol=2)
library(gridExtra)
plot1 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + theme(legend.position="top") + labs(title="")
plot2 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + aes(colour=numShapes) + facet_wrap(~timerDisplay, ncol=4) +
theme(legend.position="top") + labs(title="")
grid.arrange(plot1, plot2, ncol=2)
shape_untimed[shape_untimed$groupID=="HotchkissStudent16",]
library(gridExtra)
plot1 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + theme(legend.position="top") + labs(title="")
plot2 <- ggplot(data = shape_untimed, aes(x=matchingScheme, y=numErrors)) +
geom_boxplot()  + aes(colour=numShapes) + facet_wrap(~timerDisplay, ncol=4) +
theme(legend.position="top") + labs(title="")
grid.arrange(plot1, plot2, ncol=2)
shape_HotchkissStudent16$numShape
knitr::opts_chunk$set(echo = TRUE)
shape_HotchkissStudent16 <- shape_untimed[shape_untimed$groupID=="HotchkissStudent16",]
shape_HotchkissStudent16$numShape
table(shape_HotchkissStudent16$numShape)
table(shape_HotchkissStudent16$timerDisplay)
mean(shape_untimed_sec$TimeUsedSec)
?
mean
mean(music_untimed$TimeUsedSec)
?abline
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(gridExtra)
abline(mean(music_untimed$TimeUsedSec))
?mean
rm(mean)
abline(mean(music_untimed$TimeUsedSec))
mean(music_untimed$TimeUsedSec)
music_untimed <- shape_untimed_sec[tolower(strtrim(shape_untimed_sec$v1label,2))=="mu" |
tolower(strtrim(shape_untimed_sec$v1label,2))=="so",]
mean(music_untimed$TimeUsedSec)
mean(shape_untimed_sec$TimeUsedSec)
mean(music_untimed[music_untimed$timerDisplay==1,]$TimeUsedSec)
mean(music_untimed[music_untimed$timerDisplay==0,]$TimeUsedSec)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(gridExtra)
shape <- fread("http://kuiper.pearsoncmg.com/shapesplosion/webreporter.php?game=PerfectionFlash&groupID=&winlose=both&random=false&rows=&type=csv", stringsAsFactors = F)
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
shape <- fread("http://kuiper.pearsoncmg.com/shapesplosion/webreporter.php?game=PerfectionFlash&groupID=&winlose=both&random=false&rows=&type=csv", stringsAsFactors = F)
shape <- fread("http://kuiper.pearsoncmg.com/shapesplosion/webreporter.php?game=PerfectionFlash&groupID=&winlose=both&random=false&rows=&type=csv")
?as.factor
??ggplot
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plyr)
library(gridExtra)
library(data.table)
#shape <- read.csv("~/Desktop/MAP/Original.csv", stringsAsFactors = F)
shape <- fread("http://kuiper.pearsoncmg.com/shapesplosion/webreporter.php?game=PerfectionFlash&groupID=&winlose=both&random=false&rows=&type=csv")
shape_untime = shape[shape$requestedTime==0,]
shape_untimed = shape_untime[shape_untime$timeUsed!=0,]
shape_untimed$numShapes = as.factor(shape_untimed$numShapes)
shape_untimed$matchingScheme = as.factor(shape_untimed$matchingScheme)
shape_untimed$requestedTime = as.factor(shape_untimed$requestedTime)
shape_untimed$timeUsed = as.numeric(shape_untimed$timeUsed)
shape_untimed$timerDisplay = as.factor(shape_untimed$timerDisplay)
shape_untimed$numErrors = as.numeric(shape_untimed$numErrors)
shape_untimed_sec <-mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
shape_untimed_sec$numShapes = as.factor(shape_untimed_sec$numShapes)
shape_untimed_sec$timerDisplay = as.factor(shape_untimed_sec$timerDisplay)
shape_untimed_sec$matchingScheme = as.factor(shape_untimed_sec$matchingScheme)
music_untimed <- shape_untimed_sec[tolower(strtrim(shape_untimed_sec$v1label,2))=="mu" |                              tolower(strtrim(shape_untimed_sec$v1label,2))=="so",]
shape_untimed_truncate = shape_untimed_sec[shape_untimed_sec$TimeUsedSec<=1000,]
plot3 = ggplot(data = shape_untimed_truncate, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=timerDisplay) + scale_y_log10() + theme(legend.position="top") + labs(title="")
plot4 = ggplot(data = music_untimed, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=timerDisplay) + scale_y_log10() + theme(legend.position="top") + labs(title="")
grid.arrange(plot3, plot4, ncol=2)
plot3 = ggplot(data = shape_untimed_truncate, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=timerDisplay) + scale_y_log10() + theme(legend.position="top") + labs(title="")
plot4 = ggplot(data = music_untimed, aes(x=numShapes, y=TimeUsedSec)) + geom_boxplot()  + aes(colour=timerDisplay) + scale_y_log10() + theme(legend.position="top") + labs(title="")
grid.arrange(plot3, plot4, ncol=2)
?unique
library(ggplot2)
View(v1_gender)
ggplot(v1_gender, aes(x= timerDisplay, y = timeUsed) + geom_dotplot()
;
ggplot(v1_gender, aes(x= timerDisplay, y = timeUsed)) + geom_dotplot()
ggplot(v1_gender, aes(x= as.factor(timerDisplay), y = timeUsed)) + geom_dotplot()
ggplot(v1_gender, aes(x= as.factor(timerDisplay), y = timeUsed)) + geom_point()
?ggplot
?alpha
ggplot(v1_gender, aes(x= as.factor(timerDisplay), y = timeUsed, alpha = 0.5)) + geom_point()
ggplot(v1_gender, aes(x= as.factor(timerDisplay), y = timeUsed, alpha = shapesMatched)) + geom_point()
ggplot(v1_gender, aes(x= as.factor(timerDisplay), y = numErrors, alpha = shapesMatched)) + geom_point()
ggplot(v1_gender, aes(x=numErrors, y = timeUsed, alpha = shapesMatched)) + geom_point()
ggplot(v1_gender, aes(x=numErrors, y = timeUsed, colours = shapesMatched)) + geom_point()
ggplot(v1_gender, aes(x=numErrors, y = timeUsed/1000,col= shapesMatched)) + geom_point()
?mosaic
?tolower
View(v1_gender)
library(readr)
diamonds <- read_csv("~/Desktop/CSC395/datavis-bar-chart/diamonds.csv")
View(diamonds)
table(diamonds$cut)
c1 <- diamonds$carat<0.5
library(readr)
diamonds <- read_csv("~/Desktop/CSC395/datavis-bar-chart/diamonds.csv")
View(diamonds)
c1 <- diamonds$carat<0.5
c1 <- diamonds[carat<0.5,]
c1 <- diamonds[diamonds$carat<0.5,]
c2 <- diamonds[diamonds$carat<1.0 && diamonds$carat>=0.5,]
c2 <- diamonds[diamonds$carat<1.0 & diamonds$carat>=0.5,]
c3 <- diamonds[diamonds$carat<1.5 & diamonds$carat>=1.0"10",]
c3 <- diamonds[diamonds$carat<1.5 & diamonds$carat>=1.0,]
c4 <- diamonds[diamonds$carat<2.0 & diamonds$carat>=1.5,]
c5 <- diamonds[diamonds$carat<2.5 & diamonds$carat>=2.0,]
c6 <- diamonds[diamonds$carat>2.5 ,]
17674+17206+12825+4081+2011+126
count_fields(diamonds)
table(c1$carat)
table(c1$cut)
table(c2$cut)
table(c3$cut)
table(c4$cut)
table(c5$cut)
table(c6$cut)
View(c1)
c6 <- diamonds[diamonds$carat>=2.5 ,]
17674+17206+12825+4081+2011+126
17674+17206+12825+4081+2011+143
table(c6$cut)
plot(table(c1$cut))
plot(table(c1$cut))
library(mosaic)
mplot(data = c1)
mplot(c1)
mplot(table(c1))
mplot(table(c1$cut))
t<-table(C1$cut)
t<-table(c1$cut)
mplot(t)
plot(table(c1$cut))
library(readr)
txhousing <- read_csv("~/Desktop/CSC395/datavis-scatter-plot/txhousing.csv")
View(txhousing)
table(txhousing$city)
summary(txhousing$listings)
summary(txhousing[txhousing$city=="Austin",]$listings)
summary(txhousing[txhousing$city=="Austin",]$median)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(rmarkdown)
library(rprojroot)
library(ggplot2)
library(mosaic)
library(data.table)
library(xlsx)
Original <- read.csv("Original.csv")
shape <- Original
shape_untime <- shape[shape$requestedTime==0,]
shape_untimed <- shape_untime[shape_untime$timeUsed!=0,]
shape_untimed$numShapes <- as.factor(shape_untimed$numShapes)
shape_untimed$matchingScheme <- as.factor(shape_untimed$matchingScheme)
shape_untimed$requestedTime <- as.factor(shape_untimed$requestedTime)
shape_untimed$timeUsed <- as.numeric(shape_untimed$timeUsed)
shape_untimed$timerDisplay <- as.factor(shape_untimed$timerDisplay)
shape_untimed$numErrors <- as.numeric(shape_untimed$numErrors)
shape_untimed <- mutate(shape_untimed, TimeUsedSec = shape_untimed$timeUsed/1000)
gender <- filter(shape_untimed, tolower(strtrim(shape_untimed$v1label,3))=="gen" |
tolower(strtrim(shape_untimed$v1label,3))=="sex" |
tolower(strtrim(shape_untimed$v1label,4))=="male" |
tolower(strtrim(shape_untimed$v1label,1))=="f")
case <- (tolower(strtrim(gender$v1value,1)) == "m") & (tolower(strtrim(gender$v2value,1)) =="f")
gender1 <- gender[(strtrim(gender$v1value,1) != "1") &
(gender$v1value != "2") &
(gender$v1label != "Gender\rOrder") &
(gender$v1label != "female\rorder") &
(gender$v1value != "0") &
(tolower(gender$v1value) != "morf") &
(gender$studentID != "mb") &
(gender$studentID != "31207") &
(gender$v1value != "cat") &
(gender$studentID != "3659") &
(tolower(gender$v1value) != "attempt") &
(!case),]
gender1 <- mutate(gender1,
gender = as.factor(ifelse(
pmax((tolower(strtrim(gender1$v1label,1)) == "m"),
(tolower(strtrim(gender1$v1value,1)) == "m")),
1,
ifelse(pmax(tolower(strtrim(gender1$v1label,1)) == "f",
(tolower(strtrim(gender1$v1value,1)) =="f")),
0,
))))
gender <- filter(shape_untimed, tolower(strtrim(shape_untimed$v1label,3))=="gen" |
tolower(strtrim(shape_untimed$v1label,3))=="sex" |
tolower(strtrim(shape_untimed$v1label,4))=="male" |
tolower(strtrim(shape_untimed$v1label,1))=="f")
case <- (tolower(strtrim(gender$v1value,1)) == "m") & (tolower(strtrim(gender$v2value,1)) =="f")
gender1 <- gender[(strtrim(gender$v1value,1) != "1") &
(gender$v1value != "2") &
(gender$v1label != "Gender\rOrder") &
(gender$v1label != "female\rorder") &
(gender$v1value != "0") &
(tolower(gender$v1value) != "morf") &
(gender$studentID != "mb") &
(gender$studentID != "31207") &
(gender$v1value != "cat") &
(gender$studentID != "3659") &
(tolower(gender$v1value) != "attempt") &
(!case),]
gender1 <- mutate(gender1,
gender = as.factor(ifelse(
pmax((tolower(strtrim(gender1$v1label,1)) == "m"),
(tolower(strtrim(gender1$v1value,1)) == "m")),
1,
ifelse(pmax(tolower(strtrim(gender1$v1label,1)) == "f",
(tolower(strtrim(gender1$v1value,1)) =="f")),
0,
"Inconclusive"))))
tb <- as.data.frame(table(gender1$groupID))
tb1 <-table(gender1$groupID,gender1$gender)
tb1 <-as.data.frame(table(gender1$groupID,gender1$gender))
View(tb1)
View(tb)
table(tb1)
table(tb1$Var2)
?colname
?colnames
colnames(tb[0])<-"GroupId"
colnames(tb)[0]<-"GroupId"
View(tb)
colnames(tb)[1]<-"GroupId"
View(tb)
colnames(tb)[1]<-"groupID"
tb <- as.data.frame(table(gender1$groupID))
colnames(tb)[1]<-"groupID" ##Setting variable names for clarity
tb1 <-as.data.frame(table(gender1$groupID,gender1$gender))
colnames(tb1)[1]<- "groupID"
colnames(tb1)[2]<- "gender"
##Select groups that are under size 50
tb2 <- tb[tb$Freq >= 5 & tb$Freq <= 50,]
##Create a vector of groupID's whose size is between 25 and 50
selected_groupID <- as.character(tb2$Var1)
knitr::opts_chunk$set(echo = TRUE)
group_ID <- as.character(tb$groupID)
remove_gp <- c()
for(i in 1:length(tb1$Freq)){
if(tb1$Freq[i] <= 1) {
cbind(remove_gp,as.character(tb1$groupID))
}
}
for(i in 1:length(tb1$Freq)){
if(tb1$Freq[i] <= 1) {
cbind(remove_gp,tb1$groupID)
}
}
knitr::opts_chunk$set(echo = TRUE)
##temp = list.files(pattern="*.csv")
##myfiles = do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
group_data <- read.csv("cleaned_gender.csv")
table(group_data$groupID)
MATH22015<-filter(group_data, group_data$group_ID=="MATH22015")
?filter
MATH22015<-filter(group_data, group_ID=="MATH22015")
MATH22015<-filter(group_data, group_data$group_ID=="MATH22015")
rm(group_ID)
MATH22015<-filter(group_data, group_data$group_ID=="MATH22015")
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
female <- group_data$gender == 0
male <- group_data$gender == 1
t_test<- t.test(male,female)
female <- group_data[group_data$gender == 0,]
male <- group_data[group_data$gender == 1,]
t_test<- t.test(male,female)
female <- group_data[group_data$gender == 0,]$TimeUsedSec
male <- group_data[group_data$gender == 1,]$TimeUsedSec
t_test<- t.test(male,female)
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MAT_female <- MATH22015[MATH22015$gender == 0,]$TimeUsedSec
MAT_male <- MATH22015[MATH22015$gender == 1,]$TimeUsedSec
t.test(MATH22015$gender==1, MATH22015$gender==1)
female <- group_data[group_data$gender == 0,]$TimeUsedSec
male <- group_data[group_data$gender == 1,]$TimeUsedSec
t_test<- t.test(male,female)
p_value <- t_test$pvalues
p_value <- t_test$p.value
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MAT_female <- MATH22015[MATH22015$gender == 0,]$TimeUsedSec
MAT_male <- MATH22015[MATH22015$gender == 1,]$TimeUsedSec
t.test(MATH22015$gender==1, MATH22015$gender==1)
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MAT_female <- MATH22015[MATH22015$gender == 0,]$TimeUsedSec
MAT_male <- MATH22015[MATH22015$gender == 1,]$TimeUsedSec
t.test(MAT_male,MAT_female)
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MAT_female <- MATH22015[MATH22015$gender == 0,]$TimeUsedSec
MAT_male <- MATH22015[MATH22015$gender == 1,]$TimeUsedSec
MAT_t_test <- t.test(MAT_male,MAT_female)
MAT_pvalue <- MAT_t_test$p.value
?t_test
female <- group_data[group_data$gender == 0,]$TimeUsedSec
male <- group_data[group_data$gender == 1,]$TimeUsedSec
t_test<- t.test(male,female,alternative="two.sided")
p_value <- t_test$p.value
MATH22015<-filter(group_data, group_data$groupID=="MATH22015")
MAT_female <- MATH22015[MATH22015$gender == 0,]$TimeUsedSec
MAT_male <- MATH22015[MATH22015$gender == 1,]$TimeUsedSec
MAT_t_test <- t.test(MAT_male,MAT_female,alternative="two.sided")
MAT_pvalue <- MAT_t_test$p.value
t_stat<-t_test$statistic
par(mar=c(1,1,1,1))
par(mfrow = c(4,5))
groupName <- c()
pvalues <- c()
tb <- as.data.frame(table(group_data$groupID))
##Select groups that are under size 50
tb2 <- tb[tb$Freq >= 5 & tb$Freq <= 50,]
##Create a vector of groupID's whose size is between 25 and 50
selected_groupID <- as.character(tb2$Var1)
for (i in 1:length(selected_groupID)) {
female <- group_data[group_data$groupID == selected_groupID[i] & group_data$gender == 0,]$TimeUsedSec
male <- group_data[group_data$groupID == selected_groupID[i] & group_data$gender == 1,]$TimeUsedSec
if (length(female) > 1 & length(male) > 1) {
groupName <- cbind(groupName, selected_groupID[i])
p <- round(t.test(female, male)$p.value, digits = 3)
pvalues <- cbind(pvalues, p)
data1 <- group_data[group_data$groupID == selected_groupID[i],]
if (p < 0.05) {
boxplot(TimeUsedSec ~ gender,data=data1, col="green", main=paste("n=", dim(data1)[1], ", pval=", p), xlab="Gender (1=Male, 0=Female)", ylab="Time Used Seconds")
} else {
boxplot(TimeUsedSec ~ gender,data=data1, main=paste("n=", dim(data1)[1], ", pval=", p), xlab="Gender (1=Male, 0=Female)", ylab="Time Used Seconds")
}
}
}
mplot(group_data)
group_data$gender <- as.factor(group_data$gender)
mplot(group_data)
ggplot(data=group_data, aes(x=gender, y=TimeUsedSec)) + geom_boxplot()  + theme(legend.position="top") + labs(title="")
ggplot(data=group_data, aes(x=gender, y=TimeUsedSec)) + geom_boxplot()  + theme(legend.position="top") + labs(title="")
ggplot(data=MATH22015, aes(x=gender, y=TimeUsedSec)) + geom_boxplot()  + theme(legend.position="top") + labs(title="")
MATH22015$gender= as.factor(MATH22015$gender)
MATH22015$gender= as.factor(MATH22015$gender)
ggplot(data=MATH22015, aes(x=gender, y=TimeUsedSec)) + geom_boxplot()  + theme(legend.position="top") + labs(title="")
mplot()
mplot(group_data)
mplot(group_data)
plot(table(group_data$TimeUsedSec,group_data$gender))
plot(group_data$TimeUsedSec,group_data$gender)
hist(group_data$TimeUsedSec,group_data$gender)
hist(male)
hist(male, bin = 1)
?hist
hist(male, breaks = 10)
warnings()
hist(male, breaks = 50)
library(readr)
txhousing <- read_csv("~/Desktop/CSC395/datavis-scatter-plot/txhousing.csv")
View(txhousing)
Austin <- subset(txhousing, city == "Austin")
Houston <- subset(txhousing, city == "Houston")
table(txhousing$city)
Dallas <- subset(txhousing, city == "Dallas")
SanAntonio <- subset(txhousing, city == "San Antonio")
length(Dallas)
max(Austin$listings)
max(txhousing$listings)
summary(txhousing$listings)
summary(txhousing$median)
max(Austin$listings)
min(Austin$listings)
max(Dallas$listings)
max(Austin$median)
min(Austin$median)
table(txhousing$year)
mplot
mplot()
mean_norm_dist <- function(mean1, mean2, sd1, sd2, n1, n2) {
data <- vector()
par(mar=c(2,2,2,2))
par(mfrow = c(2,1))
print("Please select a distribution: ")
s <- readline()
if (s == "normal") {
hx1 <- rnorm(n1, mean1, sd1)
hx2 <- rnorm(n2, mean2, sd2)
hist(hx1, prob = TRUE, main="Normal", cex.axis=.8, xlim=c(-5,5), breaks=20)
curve(dnorm(x, mean = mean1, sd = sd1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(hx2, prob = TRUE, main="Normal", cex.axis=.8, xlim=c(-5,5), breaks=20)
curve(dnorm(x, mean = mean2, sd = sd2),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
} else if (s == "skewed") {
hx1 <- rchisq(n1, df=4) + mean1
hx2 <- rchisq(n2, df=4) + mean2
hist(hx1, prob = TRUE, main="Skewed", cex.axis=.8, xlim=c(0,12), breaks=20)
curve(dchisq(x, df = 4),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(hx2, prob = TRUE, main="Skewed", cex.axis=.8, xlim=c(0,12), breaks=20)
curve(dchisq(x, df = 4),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
} else if (s == "uniform") {
hx1 <- runif(n1, min = mean1 - sd1, max = mean1 + sd1)
hx2 <- runif(n2, min = mean2 - sd2, max = mean2 + sd2)
hist(hx1, prob = TRUE, main="Uniform", cex.axis=.8, xlim=c(-3,3), breaks=20)
curve(dunif(x, min = mean1 - sd1, max = mean1 + sd1),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(hx2, prob = TRUE, main="Uniform", cex.axis=.8, xlim=c(-3,3), breaks=20)
curve(dunif(x, min = mean2 - sd2, max = mean2 + sd2),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
} else {
print("Distribution not found.")
return()
}
mean_diff <- mean(hx1) - mean(hx2)
zscore <- (mean(hx1) - mean(hx2))/(sqrt( ((sd1)^2)/(n1) + ((sd2)^2)/(n2) ))
pval <- round(t.test(hx1, hx2)$p.value, digits = 3)
data <- c(mean_diff, zscore, pval)
# Q: overlay the two graphs or show in a column?
return(data)
#plot(hx1, col="red", type = "h", xlab = "", ylab = "",
#     main = "normal", axes = FALSE)
#plot(hx2, col="green", type = "h", xlab = "", ylab = "",
#     main = "normal", axes = FALSE)
}
runApp('.')
shiny::runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
hx1 <- rnorm(10,0,3)
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
runApp('Desktop/MAP/S17MAP/Jinlin-Yuan/Visualizing_p_value')
