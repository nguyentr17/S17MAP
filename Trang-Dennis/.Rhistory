knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(plyr)
library(dplyr)
library(ggplot2)
library(RCurl)
install.packages("RCurl")
library(RCurl)
url <- "http://statgames.tietronix.com/tangrams/webreporter.php?game=tangrams&groupID=&winlose=both&random=false&rows=&type=csv"
tangram <- read.csv(textConnection(readLines(url)), stringsAsFactors = F)
tangram <- tangram[tangram$TimeUsed > 0 & tangram$TimeUsed < 3600,]
tangram$TimeUsed_log <- log(tangram$TimeUsed)
factorlist <- as.data.frame(table(c(tangram$Factor1,tangram$Factor2, tangram$Factor3)))
factorlist <- factorlist[order(- factorlist$Freq),]
head(factorlist, 20)
### Factor to be filtered: GENDER
### Step 1: Create a key set: A set of criteria for regular expressions/ key patterns
gen = c("^gen","^sex")
gen_male = c("^m","^h")
gen_female = c("^f", "^mu")
### Step 2: Create a variable to identify whether a study includes GENDER as a factor or not
### Supporting functions
### ismatch
### @input: cond: a vector of key patterns (e.g. gen)
###         x, y, z: 3 columns to look for key
### @return: 0 if no match
###          index of the factor (1, 2, 3() if there is match
ismatch <- function(cond, x, y, z) {
x <- grep(paste(cond, collapse = "|"), c(x, y, z), ignore.case = T, value = FALSE)
return (ifelse(length(x), as.numeric(x), as.numeric(0)))
}
### Step 3: Create a variable for levels of genders if GENDER is a factor in that study
### level_gen_fun
### @input: x is the col index (given by factor_gender)
###         y is the row index
### @return: -1 if no gender factor indicated
###          -2 if gender factor indicated but level_gen key patterns not matched (require future manual check)
###           M/F
### @note: this function is specific to gender only. Needs to think about how to generalize it.
level_gen_fun <- function(x, y) {
return (ifelse(x == 0, -1,
ifelse(grepl(paste(gen_female, collapse = "|"),tangram[y,2*x+3], ignore.case = T),
"F",
ifelse(grepl(paste(gen_male, collapse = "|"),tangram[y,2*x+3], ignore.case = T),
"M",-2))))
}
## cannot be used for data table
tangram <- as.data.table(tangram)
tangram[, factor_gender := ismatch(gen, Factor1, Factor2, Factor3), by = 1:nrow(tangram)]
tangram <- as.data.frame(tangram)
tangram$level_gender <- mapply(level_gen_fun, tangram$factor_gender, 1:nrow(tangram), SIMPLIFY = T)
tangram_tested <- as.data.table(tangram)
tangram_tested$level_gender[tangram_tested$level_gender == -2] <- "Others"
tangram_tested$GroupName <- tolower(tangram_tested$GroupName) ### ASSUMPTION: case-insenstive for group name
# filtering out null names and groups with small sample size (< 5)
tangram_tested <- tangram_tested[tangram_tested$GroupName != "",]
# Only include 2 levels of gender: Female and Male
tangram_pvalue <- tangram_tested[tangram_tested$level_gender %in% c("F", "M"),]
tangram_pvalue[, `:=`( SampleSize = .N) , by = GroupName]
tangram_pvalue <- tangram_pvalue[tangram_pvalue$SampleSize >= 5,]
tangram_pvalue[, `:=`(log_timeused_mean = mean(TimeUsed_log), timeused_mean = mean(TimeUsed)), by = c("GroupName", "level_gender")]
tangram_pvalue[, `:=`(n = .N, sd = sd(TimeUsed_log)), by = c("GroupName", "level_gender")]
ttestFun <- function(dat) {
if (sum(dat$level_gender == "F") > 1 && sum(dat$level_gender == "M") > 1) {
the_fit <- t.test(TimeUsed_log ~ level_gender, data = dat)
#setNames(the_fit$p.value, "p.value")}
c("p.value" = the_fit$p.value, "samplesize" = mean(dat$SampleSize))}
else {
c("p.value" = -1, "samplesize" = mean(dat$SampleSize))
}
}
# 1. Scatterplot of pvalue vs. sample size
alpha <- 0.1
gender_pval_dist <- ddply(tangram_pvalue, ~ GroupName, ttestFun)
gender_pval_dist$significant <-(gender_pval_dist$p.value < alpha)*1
gender_pval_dist$significant <- as.factor(gender_pval_dist$significant)
ggplot(gender_pval_dist[gender_pval_dist$p.value != -1,], aes(x = samplesize, y = p.value)) +
geom_point(aes(colour = significant)) +
scale_color_manual(values=c("black", "red")) +
geom_hline(aes(yintercept = alpha), color = "red") +
geom_text(aes(100,0.1,label = "Significant level = 0.1", vjust = -1), color = "red") +
scale_x_continuous(name="Sample Size", limits=c(0, 125)) +
scale_y_continuous(name="t-test p-value", limits=c(0, 1), breaks = seq(0,1, by = 0.1))
# 2. Histogram of p-value
ggplot(gender_pval_dist[gender_pval_dist$p.value != -1,], aes(p.value)) +
geom_histogram(binwidth = 0.01, position = "identity", alpha = 0.5, colour = "black", fill = "white")
# 3. Overlaid histogram for means (Female vs Male)
gender_samplingdis <- tangram_tested[tangram_tested$level_gender != -1,]
gender_samplingdis[,`:=`(SampleSize = .N), by = GroupName]
gender_samplingdis[, `:=`(log_timeused_mean = mean(TimeUsed_log), timeused_mean = mean(TimeUsed)), by = c("GroupName", "level_gender")]
gender_samplingdis[, `:=`(n = .N, sd = sd(TimeUsed_log)), by = c("GroupName", "level_gender")]
gender_samplingdis <- gender_samplingdis[,c("GroupName", "level_gender", "SampleSize", "timeused_mean", "log_timeused_mean","n","sd"), with = FALSE]
gender_samplingdis <- gender_samplingdis[!duplicated(gender_samplingdis),]
### Aggregate data for vertical lines
gender_samplingdis_vline <- gender_samplingdis %>%
group_by(level_gender) %>%
summarise(log_timeused_mean = mean(log_timeused_mean), timeused_mean = mean(timeused_mean))
ggplot(gender_samplingdis, aes(timeused_mean, fill = level_gender)) +
geom_density(alpha = 0.3) +
geom_vline(data=gender_samplingdis_vline, aes(xintercept=timeused_mean,  colour=level_gender),
linetype="dashed", size=1) +
labs(title = "Distribution of Sample Means of Different Gender Levels") +
labs(x = "Sample Mean", y = "Density") +
ylim(0.00, 0.025) +
scale_x_continuous(minor_breaks = seq(0, 200, by = 25))
ggplot(gender_samplingdis, aes(log_timeused_mean, fill = level_gender)) +
geom_density(alpha = 0.3) +
geom_vline(data=gender_samplingdis_vline, aes(xintercept=log_timeused_mean,  colour=level_gender),
linetype="dashed", size=1) +
labs(title = "Distribution of Sample Means of Different Gender Levels") +
labs(x = "Sample Mean (log)", y = "Density") +
ylim(0.00, 1.00)
bwplot( TimeUsed_log ~ level_gender, data = tangram[tangram$level_gender == "F"|tangram$level_gender == "M",], main="")
?bwplot
library(mosaic)
bwplot( TimeUsed_log ~ level_gender, data = tangram[tangram$level_gender == "F"|tangram$level_gender == "M",], main="")
gen_won_res_count <-  as.data.frame(table(gen_tangram[gen_tangram$RequestedTime != 0,]$level_gender,gen_tangram[gen_tangram$RequestedTime != 0,]$Won))
ggplot(gen_won_res_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_tangram <- tangram[tangram$level_gender == "F"|tangram$level_gender == "M",]
gen_won_res_count <-  as.data.frame(table(gen_tangram[gen_tangram$RequestedTime != 0,]$level_gender,gen_tangram[gen_tangram$RequestedTime != 0,]$Won))
ggplot(gen_won_res_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame,]
gen_tangram_count <- count_(gen_tangram_statsgame,"PuzzleName")
gen_tangram_count <- gen_tangram_count[order(-gen_tangram_count$n),]
ggplot(gen_tangram_statsgame[gen_tangram_statsgame$PuzzleName %in% head(gen_tangram_count$PuzzleName,5),], aes(fill = level_gender, y = TimeUsed_log, x = PuzzleName)) +
geom_bar(position = "dodge", stat = "identity")
statsgame <- c("Laughing Man", "Piano", "The Hook", "Complex Hexagon", "Diamond", "House of Tangrams",
"A Nice Lighthouse", "The Brain Buster", "A Simple Chair", "The Hat Wearer",
"The Acrobat", "The Bird", "Crouching Cat", "The Goat", "The Six", "The G",
"Andy's Puzzle", "Walking Person Puzzle", "A Medicine Jar", "Candle")
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame,]
gen_tangram_count <- count_(gen_tangram_statsgame,"PuzzleName")
gen_tangram_count <- gen_tangram_count[order(-gen_tangram_count$n),]
ggplot(gen_tangram_statsgame[gen_tangram_statsgame$PuzzleName %in% head(gen_tangram_count$PuzzleName,5),], aes(fill = level_gender, y = TimeUsed_log, x = PuzzleName)) +
geom_bar(position = "dodge", stat = "identity")
### Factor to be filtered: STEM
### Step 1: Create a key set: A set of criteria for regular expressions/ key patterns
stem <- c("stem")
stem_Y <- c("^y")
stem_N <- c("^n")
### Step 2: Create a variable to identify whether a study includes GENDER as a factor or not
tangram$factor_STEM <- mapply(ismatch, stem, tangram$Factor1, tangram$Factor2, tangram$Factor3, SIMPLIFY = TRUE)
### Step 3: Create a variable for levels of STEM if STEM is a factor in that study
### level_stem_fun
### @input: x is the col index (given by factor_gender)
###         y is the row index
### @return: -1 if no gender factor indicated
###          -2 if gender factor indicated but level_gen key patterns not matched (require future manual check)
###           Y/N
### @note: this function is specific to STEM only. Needs to think about how to generalize it.
level_stem_fun <- function(x, y) {
return (ifelse(x == 0, -1,
ifelse(grepl(paste(stem_Y, collapse = "|"),tangram[y,2*x+3], ignore.case = T),
"Y",
ifelse(grepl(paste(stem_N, collapse = "|"),tangram[y,2*x+3], ignore.case = T),
"N",-2))))
}
tangram$level_stem <- mapply(level_stem_fun, tangram$factor_STEM, 1:nrow(tangram), SIMPLIFY = TRUE)
stem_tangram <- tangram[tangram$level_stem == "Y"|tangram$level_stem == "N",]
gen_won_count <- as.data.frame(table(gen_tangram$level_gender,gen_tangram$Won))
ggplot(gen_tangram, aes(fill = Won, y = TimeUsed, x = level_gender)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(gen_won_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_won_res_count <-  as.data.frame(table(gen_tangram[gen_tangram$RequestedTime != 0,]$level_gender,gen_tangram[gen_tangram$RequestedTime != 0,]$Won))
ggplot(gen_won_res_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_won_count <- as.data.frame(table(gen_tangram$level_gender,gen_tangram$Won))
ggplot(gen_tangram, aes(fill = Won, y = TimeUsed, x = level_gender)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(gen_won_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_won_res_count <-  as.data.frame(table(gen_tangram[gen_tangram$RequestedTime != 0,]$level_gender,gen_tangram[gen_tangram$RequestedTime != 0,]$Won))
ggplot(gen_won_res_count, aes(x=Var1, y=Freq,fill=Var2)) + geom_bar(stat="identity")
gen_won_count <- as.data.frame(table(gen_tangram$level_gender,gen_tangram$Won))
ggplot(gen_tangram, aes(fill = Won, y = TimeUsed, x = level_gender)) +
geom_bar(position = "dodge", stat = "identity")
temp <- gen_tangram[gen_tangram$GroupName == "14MSIM",]
ggplot(temp, aes(x = HintsUsed , y = TimeUsed,fill=level_gender)) +
geom_boxplot(position = position_dodge(width = 1)) +
coord_flip()+
labs(title="plot") +
theme(plot.title = element_text(family = "Trebuchet MS", color = "blue", face="bold", size=12, hjust=0))
ggplot(temp, aes(x = HintsUsed , y = TimeUsed,fill=level_gender)) +
geom_violin(position = position_dodge(width = 1),trim = FALSE) +
geom_boxplot(width=0.1, fill="white")+
coord_flip()+
labs(title="plot") +
geom_vline(xintercept=c(1.5,2.5,3.5,4.5,5.5,6.5,7.5))+
theme(plot.title = element_text(family = "Trebuchet MS", color = "blue", face="bold", size=12, hjust=0))
gen_table <- gen_tangram%>%
group_by(GroupName) %>%
summarise(number = n())
gen_table <- filter(gen_table,(gen_table$number>30))
gen_table <- filter(gen_table,(gen_table$GroupName != ""))
gen_name<-gen_table$GroupName
p <- list()
for (i in 1:length(gen_name)){
temp <- gen_tangram[gen_tangram$GroupName == gen_name[i],]
p[[i]]<-ggplot(temp, aes(x = HintsUsed , y = TimeUsed,fill=level_gender)) +
geom_violin(position = position_dodge(width = 1),trim = FALSE) +
geom_boxplot(width=0.1, fill="white")+
coord_flip()+
labs(title="plot") +
theme(legend.position='none')+
geom_vline(xintercept=c(1.5,2.5,3.5,4.5,5.5,6.5,7.5))+
theme(plot.title = element_text(family = "Trebuchet MS", color = "blue", face="bold", size=12, hjust=0))
}
library(gridExtra)
marrangeGrob(p, ncol=3,nrow=2)
