tangram <- read.csv("tangrams_data-2.csv", stringsAsFactors = F)
View(tangram[tangram$Factor1 == "gen*",])
View(tangram[strtrim(tangram$Factor1) == "gen",])
View(tangram[strtrim(tangram$Factor1,3) == "gen",])
View(tangram[strtrim(tangram$Factor1,3) %in% gender,])
gender <- c("gen","Gen")
View(tangram[strtrim(tangram$Factor1,3) %in% gender,])
gender_tangram <- tangram[strtrim(tangram$Factor1,3) %in% gender |
strtrim(tangram$Factor2,3) %in% gender |
strtrim(tangram$Factor3,3) %in% gender,]
View(gender_tangram)
gen_tangram1 <- tangram[strtrim(tangram$Factor1,3) %in% gender,]
tangram <- tolower(tangram[,c("Factor1", "Factor2", "Factor3", "Level1", "Level2", "Level3")])
?apply
tangram <- apply(tangram,c("Factor1", "Factor2", "Factor3", "Level1", "Level2", "Level3"),
function(x) tolower(x))
tangram <- read.csv("tangrams_data-2.csv", stringsAsFactors = F)
tangram <- apply(tangram,c("Factor1", "Factor2", "Factor3", "Level1", "Level2", "Level3"),
function(x) tolower(x))
tangram <- apply(tangram,c(4:9),
function(x) tolower(x))
tangram <- apply(tangram,4:9,
function(x) tolower(x))
tangram <- apply(tangram,4:9,tolower(x))
tangram <- apply(tangram,4:9,tolower)
tangram <- apply(tangram,4,tolower)
gen_tangram1 <- tangram[tolower(strtrim(tangram$Factor1,3)) %in% gender,]
gen_tangram1 <- tangram[tolower(strtrim(tangram$Factor1,3)) == "gen",]
View(gen_tangram1)
gen_tangram1 <- tangram[tolower(strtrim(tangram$Factor1,3)) == "gen",]
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "m" || tolower(strtrim(gen_tangram1,1)) == "h"] <- "M"
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "f" || tolower(strtrim(gen_tangram1,2)) == "mu"] <- "F"
View(gen_tangram1)
level(gen_tangram1)
summary()
levels(gen_tangram1)
levels(gen_tangram1$gender)
levels(as.factor(gen_tangram1$gender))
gen_tangram1 <- tangram[tolower(strtrim(tangram$Factor1,3)) == "gen",]
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "m" || tolower(strtrim(gen_tangram1$Level1,1)) == "h"] <- "M"
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "f" || tolower(strtrim(gen_tangram1$Level1,2)) == "mu"] <- "F"
View(gen_tangram1)
levels(as.factor(gen_tangram1$gender))
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "m" | tolower(strtrim(gen_tangram1$Level1,1)) == "h"] <- "M"
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "m" | tolower(strtrim(gen_tangram1$Level1,1)) == "h"] <- "M"
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "f" | tolower(strtrim(gen_tangram1$Level1,2)) == "mu"] <- "F"
levels(as.factor(gen_tangram1$gender))
View(gen_tangram1)
gen_tangram2 <- tangram[tolower(strtrim(tangram$Factor2,3)) == "gen",]
gen_tangram2$gender[tolower(strtrim(gen_tangram2$Level2,1)) == "m" | tolower(strtrim(gen_tangram2$Level2,1)) == "h"] <- "M"
gen_tangram2$gender[tolower(strtrim(gen_tangram2$Level2,1)) == "f" | tolower(strtrim(gen_tangram2$Level2,2)) == "mu"] <- "F"
levels(as.factor(gen_tangram2$gender))
gen_tangram3 <- tangram[tolower(strtrim(tangram$Factor3,3)) == "gen",]
gen_tangram3$gender[tolower(strtrim(gen_tangram3$Level3,1)) == "m" | tolower(strtrim(gen_tangram3$Level3,1)) == "h"] <- "M"
gen_tangram3$gender[tolower(strtrim(gen_tangram3$Level3,1)) == "f" | tolower(strtrim(gen_tangram3$Level3,2)) == "mu"] <- "F"
levels(as.factor(gen_tangram3$gender))
rm(gender_tangram)
gen_tangram <- rbind(gen_tangram1,gen_tangram2,gen_tangram3)
levels(as.factor(gen_tangram$gender))
View(gen_tangram)
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame]
statsgame <- c("Laughing Man", "Piano", "The Hook", "Complex Hexagon", "Diamond", "House of Tangrams",
"A Nice Lighthouse", "The Brain Buster", "A Simple Chair", "The Hat Wearer",
"The Acrobat", "The Bird", "Crouching Cat", "The Goat", "The Six", "The G",
"Andy's Puzzle", "Walking Person Puzzle", "A Medicine Jar", "Candle")
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame]
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame,]
gen_tangram_count <- count(gen_tangram_statsgame,"PuzzleName")
library(plyr)
library(treemap)
gen_tangram_count <- count(gen_tangram_statsgame,"PuzzleName")
itreemap(gen_tangram_count, index = "PuzzleName",
vSize = "freq")
itreemap(gen_tangram_count, index = "PuzzleName",
vSize = "freq")
library(ggplot2)
ggplot(gen_tangram_statsgame, aes(fill = gender, y = TimeUsed, x = PuzzleName)) +
geom_bar(position = "dodge", stat = "identity")
summary(gen_tangram)
View(gen_tangram$PuzzleName == "House of Tangrams")
View(gen_tangrams[(gen_tangram$PuzzleName == "House of Tangrams"),])
View(gen_tangram[(gen_tangram$PuzzleName == "House of Tangrams"),])
View(gen_tangram[is.na(gen_tangram$gender) == 1,])
gen_tangram <- gen_tangram[is.na(gen_tangram$gender) != 1,]
gen_tangram_statsgame <- gen_tangram[gen_tangram$PuzzleName %in% statsgame,]
gen_tangram_count <- count(gen_tangram_statsgame,"PuzzleName")
ggplot(gen_tangram_statsgame, aes(fill = gender, y = TimeUsed, x = PuzzleName)) +
geom_bar(position = "dodge", stat = "identity")
gen_tangram_count
sort(gen_tangram_count, decreasing = T)
sort(gen_tangram_count,gen_tangram_count$freq)
?sort
?order
sort(gen_tangram_count$freq, decreasing = T)
itreemap(gen_tangram_count, index = "PuzzleName",
vSize = "freq")
gen_tangram_count <- gen_tangram_count[order(-freq),]
gen_tangram_count <- gen_tangram_count[order(-gen_tangram_count$freq),]
gen_tangram_count
ggplot(gen_tangram_statsgame[gen_tangram_statsgame$PuzzleName %in% head(gen_tangram_count$PuzzleName,5),], aes(fill = gender, y = TimeUsed, x = PuzzleName)) +
geom_bar(position = "dodge", stat = "identity")
itreemap(gen_tangram_count, index = "PuzzleName",
vSize = "freq")
length(unique(tangram$GroupName))
sum(tangram$GroupName == "")
install.packages("RCurl")
library(RCurl)
?getURL
library(readr)
Sales_Data1968_1485801140 <- read_csv("~/Downloads/Sales_Data1968_1485801140.csv")
View(Sales_Data1968_1485801140)
baseURL <- "/statisticallygrounded/webreporter.php?rid=1968&amp;cname=Sales Data"
url_content <- getURL(baseURL)
baseURL <- "/statisticallygrounded/webreporter.php?rid=1968&amp"
url_content <- getURL(baseURL)
baseURL <- "http://statgames.tietronix.com/statisticallygrounded/webreporter.php?rid=1968&amp"
url_content <- getURL(baseURL)
class(url_con)
class(url_content)
View(url_content)
url_content <- gsub('<br />', '', url_content)
weather_data <- read.csv(textConnection(url_content))
head(weather_data)
baseURL <- "http://statgames.tietronix.com/statisticallygrounded/webreporter.php?rid=1968&cname=Sales Data"
url_content <- getURL(baseURL)
url_content <- gsub('<br />', '', url_content)
weather_data <- read.csv(textConnection(url_content))
baseURL <- "http://statgames.tietronix.com/statisticallygrounded/webreporter.php?rid=1969&cname=Sales%20Data"
url_content <- getURL(baseURL)
url_content <- gsub('<br />', '', url_content)
weather_data <- read.csv(textConnection(url_content))
head(weather_data)
View(weather_data)
?readLines
dat = readLines(url_content)
View(dat)
View(url_content)
url_content
dat = readLines(url_content)
open(file=url_content, "r")
dat = readLines("http://statgames.tietronix.com/statisticallygrounded/webreporter.php?rid=1969&cname=Sales%20Data")
dat
?strsplit
strsplit(data[[1]])
strsplit(data[[1]], ",")
strsplit(dat[[1]], ",")
strsplit(dat[[1_5]], ",")
strsplit(dat[[1:5]], ",")
as.vector(strsplit(dat[[1]], ","))
unlist(strsplit(dat[[1]], ","))
rep(1:4, 2)
dat = readLines(baseURL)[[-length[dat]]]
class(dat)
dat = readLines(baseURL)[-length(dat)]
dat
supp_data_fun <- function(x) { ### x is a string/ a line
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
names(out) = tempp[1]
}
supp_data_fun(dat[1])
supp_data_fun <- function(x) { ### x is a string/ a line
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
names(out) = temp[1]
return out
}
supp_data_fun <- function(x) { ### x is a string/ a line
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
names(out) = temp[1]
return out
}
supp_data_fun <- function(x) { ### x is a string/ a line
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
#names(out) = temp[1]
return out
}
rep(2,3)
class(rep(2,3))
supp_data_fun <- function(x) { ### x is a string/ a line
temp <- unlist(strsplit(x, ","))
out <- c()
out <- rep(temp[2], length(dat) - 7)
names(out) = temp[1]
return out
}
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
out
}
supp_data_fun(dat[1])
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- c(temp[1] = rep(temp[2], length(dat) - 7))
out
}
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
out
}
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
out
names(out) = temp[1]
}
supp_data_fun(dat[1])
a <- supp_data_fun(dat[1])
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
names(out) = temp[1]
out
}
a <- supp_data_fun(dat[1])
supp_data_fun(dat[1])
View(a)
supp_data_fun <- function(x) {
temp <- unlist(strsplit(x, ","))
out <- rep(temp[2], length(dat) - 7)
out
}
?data.frame
data.frame(x=1,y=1:10)
out <- read.csv(textConnection(dat[7:lenth(dat)]))
out <- read.csv(textConnection(dat[7:length(dat)]))
View(out)
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
View(out)
try(download.file(baseURL))
url.exists(baseURL)
i = 1
url.exists(baseURL = paste(baseURL1,i,baseURL2))
i = 1969
i = 1969
url.exists(baseURL = paste(baseURL1,i,baseURL2))
paste(baseURL1,i,baseURL2)
baseURL1 <- "http://statgames.tietronix.com/statisticallygrounded/webreporter.php?rid="
baseURL2 <- "&cname=Sales%20Data"
paste(baseURL1,i,baseURL2)
?paste
url.exists(baseURL = paste0(baseURL1,i,baseURL2))
paste0(baseURL1,i,baseURL2)
url.exists(baseURL)
url.exists(paste0(baseURL1,i,baseURL2))
url.exists(baseURL = paste0(baseURL1,i,baseURL2))
url.exists(URL = paste0(baseURL1,i,baseURL2))
class(dat)
cofee_truck_dataset <- data.frame();
for (i in 1000:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(cofee_truck_dataset,out)
}
View(cofee_truck_dataset)
cofee_truck_dataset <- data.frame();
system.time(for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
})
for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
}
i = 1
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
View(out)
rm(out)
rm(dat)
system.time(for (i in 20:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
})
i=1968
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
(dat[7] == "")
i=1
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
(dat[7] == "")
system.time(for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
if (dat[7] == "") {
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
}
})
i=3
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
dat
View(dat)
dat[7]
dat[7] == ""
i=9
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
dat
dat == 0
dat == character(0)
is.true(dat == character(0))
isTRUE(dat = character(0))
isTRUE(dat == character(0))
file.info(dat)
file.info(dat)$size
i=1968
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
file.info(dat)$size
i=0
i=9
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
length(dat)
system.time(for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
if (length(dat) >= 6 & dat[7] == "") {
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
}
})
coffe_truck_dataset <- data.frame()
rm(cofee_truck_dataset)
rm(coffe_truck_dataset)
coffee_truck_dataset <- data.frame()
system.time(for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
if (length(dat) >= 6 & dat[7] == "") {
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
cofee_truck_dataset <- rbind(out,cofee_truck_dataset)
}
})
coffee_truck_dataset <- data.frame()
system.time(for (i in 1:1969) {
tempURL = paste0(baseURL1,i,baseURL2)
dat = readLines(tempURL)
if (length(dat) >= 6 & dat[7] == "") {
out <- read.csv(textConnection(dat[7:(length(dat) - 1)])) #cut an empty row at the end
for (line in 1:6) {
temp <- unlist(strsplit(dat[line], ","))
out[,temp[1]] <- temp[2]
}
coffee_truck_dataset <- rbind(out,coffee_truck_dataset)
}
})
View(coffee_truck_dataset)
unique(coffee_truck_dataset$Location)
factorlist <- as.data.frame(table(c(tangram$Factor1,tangram$Factor2, tangram$Factor3)))
View(factorlist)
unique(coffee_truck_dataset$`Total Tests Done`)
View(coffee_truck_dataset)
save.image("~/Documents/GRIN17/S17MAP/Trang-Dennis/image.RData")
View(tangram)
rm(weather_data)
gen = c("^gen","^sex")
gen_male = c("^m","^h")
gen_female = c("^f", "^mu")
ismatch <- function(cond, x, y, z) {
x <- grep(paste(cond, collapse = "|"), c(x, y, z), ignore.case = T)
return (ifelse(length(x), x[1], 0))
}
level_gen_fun <- function(x, y) {
return (ifelse(x == 0, -1,
ifelse(grepl(paste(gen_female, collapse = "|"),tangram[y,x+4], ignore.case = T),
"F",
ifelse(grepl(paste(gen_male, collapse = "|"),tangram[y,x+4], ignore.case = T),
"M",-2))))
}
tangram$factor_gender <- mapply(ismatch, gen, tangram$Factor1, tangram$Factor2, tangram$Factor3, SIMPLIFY = TRUE)
tangram$level_gender <- mapply(level_gen_fun, tangram$factor_gender, 1:nrow(tangram), SIMPLIFY = TRUE)
gen_tangram <- tangram[tangram$factor_gender > 0 & tangram_level != -2,]
gen_tangram <- tangram[tangram$factor_gender > 0 & tangram$level_gender != -2,]
mplot(gen_tangram)
library(mosaic)
mplot(gen_tangram)
install.packages("manipulate")
library(manipulate)
mplot(gen_tangram)
tangram$TimeUsed_log <- log(tangram$TimeUsed)
gen_tangram <- tangram[tangram$factor_gender > 0 & tangram$level_gender != -2,]
mplot(gen_tangram)
ggplot(gen_tangram_norestriction, aes(x = level_gender, y = TimeUsed_log))
gen_tangram_norestriction <- gen_tangram[gen_tangram$RequestedTime == 0,]
ggplot(gen_tangram_norestriction, aes(x = level_gender, y = TimeUsed_log))
mplot(gen_tangram_norestriction)
View(factorlist)
age <- c("^age")
tangram$factor_age <- tangram$factor_gender <- mapply(ismatch, gen, tangram$Factor1, tangram$Factor2, tangram$Factor3, SIMPLIFY = TRUE)
level_age_fun <- function(x, y) {
return (ifelse(x == 0, -1,
ifelse(!is.na(as.numeric(tangram[y,2*x+3])),
as.numeric(tangram[y,2*x+3]),
-2)))
}
tangram$level_age <- mapply(level_age_fun, tangram$factor_age, 1:nrow(tangram), SIMPLIFY = TRUE)
warnings()
View(tangram)
tangram$factor_gender <- mapply(ismatch, gen, tangram$Factor1, tangram$Factor2, tangram$Factor3, SIMPLIFY = TRUE)
tangram$factor_age <- mapply(ismatch, age, tangram$Factor1, tangram$Factor2, tangram$Factor3, SIMPLIFY = TRUE)
level_age_fun <- function(x, y) {
return (ifelse(x == 0, -1,
ifelse(!is.na(as.numeric(tangram[y,2*x+3])),
as.numeric(tangram[y,2*x+3]),
-2)))
}
tangram$level_age <- mapply(level_age_fun, tangram$factor_age, 1:nrow(tangram), SIMPLIFY = TRUE)
View(tangram)
?write.csv
write.csv(tangram, "tangram_updated.csv")
