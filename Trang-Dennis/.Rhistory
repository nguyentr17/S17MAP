tangrams_data <- fread("http://statgames.tietronix.com/tangrams/webreporter.php?game=tangrams&groupID=&winlose=both&random=false&rows=&type=csv")
require(treemap)
require(dplyr)
require(mosaic)
library(ggplot2)
library(data.table)
tangrams_data <- fread("http://statgames.tietronix.com/tangrams/webreporter.php?game=tangrams&groupID=&winlose=both&random=false&rows=&type=csv")
tangrams_data$HintsEnabled <- as.factor(tangrams_data$HintsEnabled)
tangrams_data$HintsUsed <- as.factor(tangrams_data$HintsUsed)
?as.numeric
tangrams_data$TimeUsed <- as.numeric(tangrams_data$TimeUsed)
tangrams_data$NumShapes <- as.numeric(tangrams_data$NumShapes)
tangrams_data <- fread("http://statgames.tietronix.com/tangrams/webreporter.php?game=tangrams&groupID=&winlose=both&random=false&rows=&type=csv")
tangrams_data$HintsEnabled <- as.factor(tangrams_data$HintsEnabled)
tangrams_data$HintsUsed <- as.factor(tangrams_data$HintsUsed)
tangrams_data$TimeUsed <- as.numeric(tangrams_data$TimeUsed)
tangrams_data$NumShapes <- as.numeric(tangrams_data$NumShapes)
tangrams_data$Won <- as.factor(tangrams_data$Won)
tangrams_data$TimerHint <- as.factor(tangrams_data$TimerHint)
tangrams_data$TimerDisplay <- as.factor(tangrams_data$TimerDisplay)
?fread
?read.csv
?fread
tangrams_data$RequestedTime <- as.numeric(tangrams_data$RequestedTime)
tangrams_data$NumClicks <- as.numeric(tangrams_data$NumClicks)
View(tangrams_data)
gen <- c("gen","sex")
tangramfilter <- tangrams_data[tangrams_data$TimeUsed < 10000,]
tangramfilter <- tangramfilter[tangramfilter$TimeUsed > 0,]
xyplot( TimeUsed ~ HintsUsed  |  HintsEnabled, data = tangramfilter, main="")
tangram2 <- as.data.frame(table(tangramfilter$PuzzleName))
colnames(tangram2) <- c("PuzzleName", "Freq")
tangram <- tangramfilter
gen <- c("gen","sex")
gen_tangram1 <- tangram[tolower(strtrim(tangram$Factor1,3)) %in% gen,]
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "m" | tolower(strtrim(gen_tangram1$Level1,1)) == "h"] <- "M"
gen_tangram1$gender[tolower(strtrim(gen_tangram1$Level1,1)) == "f" | tolower(strtrim(gen_tangram1$Level1,2)) == "mu"] <- "F"
gen_tangram2 <- tangram[tolower(strtrim(tangram$Factor2,3)) %in% gen,]
gen_tangram2$gender[tolower(strtrim(gen_tangram2$Level2,1)) == "m" | tolower(strtrim(gen_tangram2$Level2,1)) == "h"] <- "M"
gen_tangram2$gender[tolower(strtrim(gen_tangram2$Level2,1)) == "f" | tolower(strtrim(gen_tangram2$Level2,2)) == "mu"] <- "F"
gen_tangram3 <- tangram[tolower(strtrim(tangram$Factor3,3)) %in% gen,]
gen_tangram3$gender[tolower(strtrim(gen_tangram3$Level3,1)) == "m" | tolower(strtrim(gen_tangram3$Level3,1)) == "h"] <- "M"
gen_tangram3$gender[tolower(strtrim(gen_tangram3$Level3,1)) == "f" | tolower(strtrim(gen_tangram3$Level3,2)) == "mu"] <- "F"
gen_tangram <- rbind(gen_tangram1,gen_tangram2,gen_tangram3)
gen_tangram$gender <- as.factor(gen_tangram$gender)
gen_tangram <- gen_tangram[is.na(gen_tangram$gender) != 1,]
View(gen_tangram)
if (tangram$Factor1 %in% gen){
tangram$factor_gender = 1
if (tolower(strtrim(gen_tangram1$Level1,1)) == "m" | tolower(strtrim(gen_tangram1$Level1,1)) == "h"){
tangram$gender = "M"
}
if (tolower(strtrim(gen_tangram1$Level1,1)) == "f" | tolower(strtrim(gen_tangram1$Level1,2)) == "mu"){
tangram$gender = "F"
}
} else {
tangram$factor_gender = 0
}
if (tangram$Factor1 %in% gen){
tangram$factor_gender = 1
} else {
tangram$factor_gender = 0
}
if (tolower(strtrim(tangram$Factor1,3)) %in% gen){
tangram$factor_gender = 1
if (tolower(strtrim(gen_tangram1$Level1,1)) == "m" | tolower(strtrim(gen_tangram1$Level1,1)) == "h"){
tangram$gender = "M"
}
if (tolower(strtrim(gen_tangram1$Level1,1)) == "f" | tolower(strtrim(gen_tangram1$Level1,2)) == "mu"){
tangram$gender = "F"
}
} else {
tangram$factor_gender = 0
}
if (tolower(strtrim(tangram$Factor1,3)) %in% gen){
tangram$factor_gender = 1
} else {
tangram$factor_gender = 0
}
tangram[1,]
test <- tangram[1,]
test$Factor1
rm(test)
length = nrow(tangram)
length
for (i in 1:length){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
if (tolower(strtrim(check$Level1,1)) == "m" | tolower(strtrim(check$Level1,1)) == "h"){
tangram[i,]$gender = "M"
}
if (tolower(strtrim(check$Level1,1)) == "f" | tolower(strtrim(check$Level1,2)) == "mu"){
tangram[i,]$gender = "F"
}
} else {
tangram$factor_gender = 0
}
}
warnings()
for (i in 1:length){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
View(tangram)
View(tangram)
for (i in 1:length){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
warnings()
tangram <- tangram[,-factor_gender]
tangram <- tangramfilter
tangram$factor_gender <- 0
for (i in 1:length){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
for (i in 1:10){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
for (i in 1:100){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
for (i in 1:1000){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
tangram <- tangramfilter
for (i in 1:1000){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
warnings()
View(tangram)
View(tangram)
tangram$factor_gender <- 0
for (i in 1:1000){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
View(tangram)
for (i in 1:10){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen |tolower(strtrim(check$Factor2,3)) %in% gen|tolower(strtrim(check$Factor3,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
for (i in 1:1000){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen |tolower(strtrim(check$Factor2,3)) %in% gen|tolower(strtrim(check$Factor3,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
for (i in 1:length){
check <- tangram[i,]
if (tolower(strtrim(check$Factor1,3)) %in% gen |tolower(strtrim(check$Factor2,3)) %in% gen|tolower(strtrim(check$Factor3,3)) %in% gen){
tangram[i,]$factor_gender = 1
} else {
tangram[i,]$factor_gender = 0
}
}
sum(tangram$factor_gender)
tangramfilter$TimeUsed <- log(tangramfilter$TimeUsed)
ggplot(data = tangramfilter, aes(x=interaction(HintsEnabled,HintsUsed,lex.order = TRUE), y=TimeUsed) + geom_boxplot()  + theme(legend.position="none") + labs(title="Boxplot for filtered data")+xlab("HintsEnabled.HintsUsed")
ggplot(data = tangramfilter, aes(x=interaction(HintsEnabled,HintsUsed,lex.order = TRUE), y=TimeUsed)) + geom_boxplot()  + theme(legend.position="none") + labs(title="Boxplot for filtered data")+xlab("HintsEnabled.HintsUsed")
tangramfilter <- tangrams_data[tangrams_data$TimeUsed < 3600,]
tangramfilter <- tangramfilter[tangramfilter$TimeUsed > 0,]
ggplot(data = tangramfilter, aes(x=interaction(HintsEnabled,HintsUsed,lex.order = TRUE), y=TimeUsed)) + geom_boxplot()  + theme(legend.position="none") + labs(title="Boxplot for filtered data")+xlab("HintsEnabled.HintsUsed")
library(ggplot2)
ggplot(data = tangramfilter, aes(x=interaction(HintsEnabled,HintsUsed,lex.order = TRUE), y=TimeUsed)) + geom_boxplot()  + theme(legend.position="none") + labs(title="Boxplot for filtered data")+xlab("HintsEnabled.HintsUsed")
tangramfilter <- tangrams_data[tangrams_data$TimeUsed < 3600,]
tangramfilter <- tangramfilter[tangramfilter$TimeUsed > 0,]
tangramfilter$TimeUsed <- log(tangramfilter$TimeUsed )
ggplot(data = tangramfilter, aes(x=interaction(HintsEnabled,HintsUsed,lex.order = TRUE), y=TimeUsed)) + geom_boxplot()  + theme(legend.position="none") + labs(title="Boxplot for filtered data")+xlab("HintsEnabled.HintsUsed")
factorlist <- as.data.frame(table(c(tangramfilter$Factor1,tangramfilter$Factor2, tangramfilter$Factor3)))
View(factorlist)
unique(tangramfilter[tangramfilter$Factor1 == "Age",]$Level1)
unique(tangramfilter[tangramfilter$Factor2 == "Age",]$Level2)
unique(tangramfilter[tangramfilter$Factor3 == "Age",]$Level3)
unique(tangramfilter[tolower(tangramfilter$Factor1) == "age",]$Level1)
unique(tangramfilter[tolower(tangramfilter$Factor2)== "age",]$Level2)
unique(tangramfilter[tolower(tangramfilter$Factor3)== "age",]$Level3)
?ggplot
wald.ci(115,n=200,conf.level=95)
?wald.ci
library(fastR)
wald.ci(115,n=200,conf.level=95)
wilson.ci(115,n=200,conf.level = 95)
wald.ci(115,n=200,conf.level=95)
wald.ci(115,n=200,conf.level=.95)
wilson.ci(115,n=200,conf.level = .95)
ci <- wald.ci(115,n=200,conf.level=.95)
ci
ci[1,]
ci[,1]
ci[1]
ci[2]
print(waldci[1],waldci[2])
waldci <- wald.ci(115,n=200,conf.level=.95)
print(waldci[1],waldci[2])
wilson.ci(115,n=200,conf.level = .95)
waldci <- wald.ci(115,n=200,conf.level=.95)
waldci[1]
print(paste("The Wald Confidence interval is (",waldci[1],waldci[2],")"))
waldci <- wald.ci(115,n=200,conf.level=.95)
print(paste("The Wald Confidence interval is (",trunc(waldci[1],4),trunc(waldci[2],4),")"))
wilson.ci(115,n=200,conf.level = .95)
print(paste("The Wald Confidence interval is (",signif(waldci[1],digits = 6),signif(waldci[1],digits = 6),")"))
waldci <- wald.ci(115,n=200,conf.level=.95)
print(paste("The Wald Confidence interval is (",signif(waldci[1],digits = 6),signif(waldci[1],digits = 6),")"))
wilson.ci(115,n=200,conf.level = .95)
waldci <- wald.ci(115,n=200,conf.level=.95)
print(paste("The Wald Confidence interval is (",signif(waldci[1],digits = 6),signif(waldci[1],digits = 6),")"))
wilsonci <- wilson.ci(115,n=200,conf.level = .95)
print(paste("The wilson Confidence interval is (",signif(wilsonci[1],digits = 6),signif(wilsonci[1],digits = 6),")"))
?prop.test
prop.test(115,200,correct=TRUE)
prop.test(115,200,correct=FALSE)
waldci <- wald.ci(115,n=200,conf.level=.95)
print(paste("The Wald Confidence interval is (",signif(waldci[1],digits = 6),signif(waldci[2],digits = 6),")"))
wilsonci <- wilson.ci(115,n=200,conf.level = .95)
print(paste("The wilson Confidence interval is (",signif(wilsonci[1],digits = 6),signif(wilsonci[2],digits = 6),")"))
temp <- prop.test(115,200,correct=FALSE)
temp$conf.int
true <- prop.test(115,200,correct=TRUE)
false <- prop.test(115,200,correct=FALSE)
print(paste("When the correct = true, the interval is (",true$conf.int[1],true$conf.int[2],")"))
true <- prop.test(115,200,correct=TRUE)
false <- prop.test(115,200,correct=FALSE)
print(paste("When the correct = true, the interval is (",signif(true$conf.int[1],digits=6),signif(true$conf.int[2],digits=6),")"))
true <- prop.test(115,200,correct=TRUE)
false <- prop.test(115,200,correct=FALSE)
print(paste("When the correct = true, the interval is (",signif(true$conf.int[1],digits=6),signif(true$conf.int[2],digits=6),")"))
print(paste("When the correct = false, the interval is (",signif(false$conf.int[1],digits=6),signif(false$conf.int[2],digits=6),")"))
?fractions
prob1 <- matrix(c(c(55:60),0,1/4,1/2,1/4,0,0)
)
prob1
prob1 <- matrix(c(c(55:60),0,1/4,1/2,1/4,0,0),nrow=6,byrow=true)
prob1 <- matrix(c(c(55:60),0,1/4,1/2,1/4,0,0),nrow=6,byrow=TRUE)
prob1
prob1 <- matrix(c(c(55:60),0,1/4,1/2,1/4,0,0),nrow=2,byrow=TRUE)
prob1
prob1 <- matrix(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
prob1
colnames(o) <- c(55,56,57,58,59,60)
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(o) <- c(55,56,57,58,59,60)
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(o) <- c("55","56","57","58","59","60")
colnames(prob1) <- c("55","56","57","58","59","60")
prob1
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "$P(N+X=58)"
prob1
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "$P(N+X=58)$"
prob1
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- $P(N+X=58)$
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- $$P(N+X=58)$$
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "$$P(N+X=58)$$"
prob1
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
prob1
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1)
plot(prob1[,1])
prob1[,1]
prob1[1]
prob1
prob1[1,]
plot(prob1[1,])
data <- fread("https://pioneerweb.grinnell.edu/bbcswebdav/pid-447003-dt-content-rid-1654767_2/xid-1654767_2")
library(data.table)
data <- fread("https://pioneerweb.grinnell.edu/bbcswebdav/pid-447003-dt-content-rid-1654767_2/xid-1654767_2")
shape <- read_csv("~/Downloads/Shapesplosion Data S17.csv")
library(readr)
shape <- read_csv("~/Downloads/Shapesplosion Data S17.csv")
shape$response <- (abs(shape$diffColor-shape$Shape))/1000
shape$response <- (abs(shape$diffColor-shape$Shape))/1000
View(shape)
?t.test
t.test(response,data=shape)
shape$diffColor <- shape$diffColor/1000
shape$Shape <- shape$Shape/1000
shape$response <- (abs(shape$diffColor-shape$Shape))
View(shape)
t.test(shape$diffColor,shape$Shape,paired=TRUE)
shape$response <- (shape$diffColor-shape$Shape)
t.test(response,data=shape)
hist(shape$response)
histogram(shape$response)
histogram(shape$response)
X <- shape$response
hist(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
X <- shape$response
histogram(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
X <- shape$response
histogram(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
X <- shape$response
histogram(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
X <- shape$response
hist(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
lines(density(X, adjust=2), lty="dotted", col="darkgreen", lwd=2)
X <- shape$response
hist(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,])
axis(1,at=1:6,labels=c(55:60))
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,])
axis(1,at=1:6,labels=c(55:60))
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,],xaxt="")
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,],xaxt="n")
axis(1,at=1:6,labels=c(55:60))
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,],xaxt="n",ylab="Probability")
axis(1,at=1:6,labels=c(55:60))
prob1 <- matrix(c(0,1/4,1/2,1/4,0,0),nrow=1,byrow=TRUE)
colnames(prob1) <- c("55","56","57","58","59","60")
rownames(prob1) <- "P(N+X=58)"
print(prob1)
plot(prob1[1,],xaxt="n",ylab="Probability",xlab="N+X")
axis(1,at=1:6,labels=c(55:60))
